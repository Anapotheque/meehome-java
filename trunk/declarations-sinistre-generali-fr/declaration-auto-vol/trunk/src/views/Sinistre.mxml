<?xml version="1.0" encoding="utf-8"?>
<mx:Panel
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:validator="fr.generali.declaration.sinistre.auto.common.views.validation.*"
	xmlns:local="views.*"
	xmlns:Heure="fr.generali.declaration.sinistre.auto.common.views.heure.Heure"
	xmlns="fr.generali.declaration.sinistre.auto.common.views.heure.*"
	xmlns:common="fr.generali.declaration.sinistre.auto.common.views.*"
	styleName="generaliPanel"
	creationComplete="init()">
	<mx:Script>
		<![CDATA[
			import fr.generali.declaration.sinistre.auto.common.utils.Message;
			import fr.generali.declaration.sinistre.auto.common.utils.DateHelper;
			import models.vo.SinistreVO;
			import mx.events.ModuleEvent;
			import models.AppModel;
			import mx.controls.Alert;
			import fr.generali.declaration.sinistre.auto.common.views.events.DeclarationSinistreAutoEvent;
			import fr.generali.declaration.sinistre.auto.common.views.events.GestionEffetsPersonnelEvent;
			import fr.generali.declaration.sinistre.auto.common.utils.ImageResource;
			import fr.generali.declaration.sinistre.auto.common.views.heure.Heure;

			
			private static const COLOR_ERROR:String = "#DF6161";

			[Bindable]
        	private var appModel:AppModel = AppModel.getInstance();
        	
        	[Bindable]
	  		private var _firstEntryCirconstances:Boolean = true;
	  		
	  		private var _currentDate:Date = new Date();
	  		
	  		private function init():void {
	  			date.disabledRanges = DateHelper.getDisabledRangeDays();
	  		}

			private function next():void {

				// Vérification des champs
				validator.reset();
				
				//On vérifie le remplissage du champ Date, son format et la comparaison de date du sinistre avec la date du jour
				if(validator.errors.length == 0){
					validator.validateEmptyDate(date, Message.MSG_11_3);
				}
				if(validator.errors.length == 0){
					validator.formatDate(Message.MSG_11_1, date, date.formatString);	
				}
				if(validator.errors.length == 0){
					validator.compareDate(Message.MSG_11_2, date,'', date.formatString);	
				}
				//Champs Heure
				if (rbHeure.selected == true){
					validator.compareHeure(heureDebut, heureFin, Message.MSG_12)
				} 

				// Enregistrement des données dans le data model
					if(!validator.play()) {
						appModel.sinistre.typeVol = (rbgTypeVol.selectedValue == null)?"":rbgTypeVol.selectedValue.toString();
						appModel.sinistre.date = date.text;
						appModel.sinistre.selectHoraire = (rbgHeureSinistre.selectedValue == null)?"":rbgHeureSinistre.selectedValue.toString();							
						appModel.sinistre.heureDebut = int(heureDebut.hour);
						appModel.sinistre.minuteDebut= int(heureDebut.minute);
						appModel.sinistre.heureFin= int(heureFin.hour);
						appModel.sinistre.minuteFin= int(heureFin.minute);
						if(!_firstEntryCirconstances) appModel.sinistre.circonstances = txtCirconstances.text;
						appModel.sinistre.plainte = (rbgPlainte.selectedValue == null)?"":rbgPlainte.selectedValue.toString();

						this.dispatchEvent(new DeclarationSinistreAutoEvent(DeclarationSinistreAutoEvent.TO_DOMMAGES_EVENT));
					}
			}
			
			private function previous():void {
				this.dispatchEvent(new DeclarationSinistreAutoEvent(DeclarationSinistreAutoEvent.TO_ASSURE_EVENT));
			}
			
			public function clearTxtCirconstances():void {
				if(_firstEntryCirconstances) {
					txtCirconstances.text = "";
					txtCirconstances.setStyle("color","black");
					_firstEntryCirconstances=false;
				}
			}
			
			public function onClickPlainte(event:MouseEvent):void {
				if(rbgPlainte.selectedValue == "Non") {
					infoPlainte.visible = true;
					fadeIn.target = infoPlainte;
					fadeIn.play();
				} else {
					infoPlainte.visible = false;
				}
			}
			
			private function activeHoraires(enableHoraire:Boolean):void {
				this.heureDebut.enabled = enableHoraire;
				this.heureFin.enabled = enableHoraire;
				if(enableHoraire == false){
					this.heureDebut.hour=0;
					this.heureDebut.minute=0;				
					this.heureFin.hour=0;
					this.heureFin.minute=0;					
				}
			}
			
		]]>
	</mx:Script>
	
    <mx:Fade id="fadeIn" duration="800" alphaFrom="0.0" alphaTo="1.0"/>

	<mx:VBox width="88%" verticalGap="0">
		<mx:TextArea editable="false" backgroundAlpha="0" borderStyle="none" width="100%" text="Les champs suivis d'un * sont obligatoires. Sans ces informations votre demande ne peut pas être traitée." fontWeight="bold"  height="100%"/>		
		<validator:Validator id="validator" width="100%" height="0" visible="false"/>
	</mx:VBox>
	<mx:VBox horizontalAlign="left">
		<mx:HBox horizontalGap="0">			
			<mx:Image source="{ImageResource.icoAssure}"  />
			<mx:Canvas >
				<mx:Image verticalCenter="1.5" source="{ImageResource.barreBleueTitre}"/>
				<mx:Text  text="LE VOL OU LA TENTATIVE DE VOL :"  verticalCenter="2.5" horizontalCenter="-190" styleName="imageText"/>
			
			</mx:Canvas>
		</mx:HBox>
		
		<mx:HBox>
			<mx:Label text="Il s’agit : " styleName="textSimpleBold"/>
			<mx:VBox verticalGap="0">				
			<mx:RadioButtonGroup id="rbgTypeVol" selectedValue="{appModel.sinistre.typeVol}" />
				<mx:RadioButton value="1" label="{SinistreVO.getTypeVolLabel('1')}" groupName="rbgTypeVol"/>
				<mx:RadioButton value="2" label="{SinistreVO.getTypeVolLabel('2')}" groupName="rbgTypeVol"/>
				<mx:RadioButton value="3" label="{SinistreVO.getTypeVolLabel('3')}" groupName="rbgTypeVol"/>				
			</mx:VBox>
		</mx:HBox>
	  	
	  	<mx:VBox width="100%">
	  	<mx:HBox horizontalGap="0" verticalAlign="bottom">
	  		<mx:Label width="250"  styleName="simple" text="A quelle date cela s'est-il produit ?*" fontWeight="bold" />
	  		<mx:Spacer width="4" />
	  		<mx:DateField editable="true" dayNames="{['D','L','M','M','J','V','S']}"  styleName="simple"
	  			monthNames="{['JANVIER','FEVRIER','MARS','AVRIL','MAI','JUIN','JUILLET','AOUT','SEPTEMBRE','OCTOBRE','NOVEMBRE','DECEMBRE']}"
	  			formatString="{'DD/MM/YYYY'}"						  
	  			text="{appModel.sinistre.date}"
	  			restrict="0-9/"						
	  			width="100"
	  			id="date"						
	  			/>
	  	</mx:HBox>
	  	<mx:HBox horizontalGap="0">
	  		 	<mx:Spacer width="3"/>
	  		 	<mx:Label text="(Ou à défaut la date à laquelle vous en avez eu connaissance)" fontStyle="italic" width="82%" />
	  	 </mx:HBox>    
	  	</mx:VBox>
		
		<mx:VBox width="100%">
			<mx:HBox horizontalGap="0" verticalAlign="top">
				<mx:Label width="235"  styleName="textSimpleBold" text="Vers quelle heure cela s’est-il produit ?" />
				<mx:Spacer width="4" />
				<mx:RadioButtonGroup id="rbgHeureSinistre" selectedValue="{appModel.sinistre.selectHoraire}" />
				<mx:VBox>
					<mx:HBox>
						<mx:RadioButton id="rbHeure" value="1" groupName="rbgHeureSinistre" label="Entre" click="activeHoraires(true)"/>
					       <Heure id="heureDebut" showSeconds="false" is24Hour="true" styleName="simple"								
					             			borderStyle="solid" cornerRadius="5" 
					             			enabled="false" 					        	 
					         				hour="{appModel.sinistre.heureDebut}"
					         				minute="{appModel.sinistre.minuteDebut}"/> 
						<mx:Label text="et" paddingTop="2" paddingLeft="4" />
					       <Heure id="heureFin" showSeconds="false" is24Hour="true" styleName="simple"								
					             			borderStyle="solid" cornerRadius="5"
					             			enabled="false"					        	 					        	 
					         				hour="{appModel.sinistre.heureFin}"
					         				minute="{appModel.sinistre.minuteFin}"/> 
					</mx:HBox>
					<mx:HBox>
						<mx:RadioButton id="rbNsp" value="2" groupName="rbgHeureSinistre" label="Ne sait pas"  click="activeHoraires(false)"/>
					</mx:HBox>
				</mx:VBox>
			</mx:HBox>  
		</mx:VBox>
		
		<mx:HBox horizontalGap="0">
			<mx:Label width="82%"  styleName="textSimpleBold" text ="Décrivez  les circonstances du vol / de la tentative de vol "/>
			<mx:Label text="(1000 caractères maximum) " styleName="textSimple" />
			<mx:Label text=":" styleName="simpleBold" />
		</mx:HBox>
		<mx:HBox width="100%" height="100%">
			<mx:TextArea height="50" width="610" maxChars="1000" click="clearTxtCirconstances()" 
			     	  	id="txtCirconstances" 
			     	  	text="{((!_firstEntryCirconstances)?appModel.sinistre.circonstances:'Saisie libre')}"
			     	  	color="#c0c1c2"  editable="true"  backgroundAlpha="1" borderStyle="solid" />
		</mx:HBox>
		
		<mx:VBox width="100%">
			<mx:HBox horizontalGap="0" verticalAlign="bottom">
				<mx:Label width="235"  styleName="textSimpleBold" text="Avez-vous déposé plainte ?" />
				<mx:Spacer width="4" />
				<mx:RadioButtonGroup id="rbgPlainte" selectedValue="{appModel.sinistre.plainte}" />
				<mx:RadioButton id="rbPlainteOui" value="Oui" groupName="rbgPlainte" label="Oui" click="onClickPlainte(event)" />
				<mx:RadioButton id="rbPlainteNon" value="Non" groupName="rbgPlainte" label="Non" click="onClickPlainte(event)" />
			</mx:HBox>
			<mx:HBox horizontalGap="0">
				 	<mx:Spacer width="3"/>
				 	<mx:Label text="(Nous vous demanderons une copie du récépissé de la plainte)" fontStyle="italic" width="82%" />
			 </mx:HBox>    
		</mx:VBox>
		
		<mx:HBox width="70%" id="infoPlainte" styleName="warning" visible="false">
			<mx:Label id="txtInfoPlainte" width="610" textAlign="center" text="Pensez à déposer plainte le plus rapidement possible. Le récépissé vous sera demandé."/>
		</mx:HBox>
	</mx:VBox>
					  
	<mx:HBox width="100%">
		<mx:Button label="Etape précédente" width="120" styleName="NavButton" click="previous()" />
		<mx:Spacer width="100%"/>
		<mx:Button label="Etape suivante" width="120"  styleName="NavButton" click="next()"/>
	</mx:HBox>
	<common:CNIL />
</mx:Panel>