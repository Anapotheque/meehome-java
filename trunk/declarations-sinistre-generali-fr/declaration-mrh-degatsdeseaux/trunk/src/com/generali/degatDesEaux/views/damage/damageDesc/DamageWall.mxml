<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" 
	  horizontalGap="0" horizontalAlign="right" creationComplete="init()">
	<!--width="320"-->
	<mx:Script>
		<![CDATA[
			import com.generali.degatDesEaux.model.three3D.Textures;
			import com.generali.degatDesEaux.model.three3D.RoomPartType;
			import com.generali.degatDesEaux.model.AppModel;
			import com.generali.degatDesEaux.events.ui.DimensionUpdateEvent;
			import pegas.geom.Dimension;
			[Bindable]
			public var appModel:AppModel = AppModel.getInstance();
			public const ROOMPART_WALLS_TYPE:String = RoomPartType.WALLS;
			public const ROOMPART_CEILING_TYPE:String = RoomPartType.CEILING;
			[Bindable]
			[Embed(source="/assets/fred/mini_fleche_down.swf")]
			private var IconClose:Class;
			[Bindable]
			[Embed(source="/assets/fred/mini_fleche_right.swf")]
			private var IconOpen:Class;
			[Bindable]
			public var open:Boolean = false;
			
			[Bindable]
			public var filled:Boolean = false;
			
			
			public var pieceID:String 
			[Bindable]
			public var coef:int =1;
			public const INITIAL_HEIGHT:int = 170;
			public const COLLAPSED_HEIGHT:int = 25;
			[Bindable]
			public var title:String ="" ;
			[Bindable]
			public var wall:Boolean = true;
			
			private var currentWallPaperSurface:String = "";
			private var currentSurfacePainting:String = "";
			private var currentSurfaceOther:String = "";
			private var currentHighestDim:String="none";
			
			
			private function getFilledVal(input:String):Boolean
			{
				return (input!="" && int(input)>0); 
			}
			public function setFilled():void
			{
				setModel();
				var arr:Array = new Array(wallPaperSurface.text,surfacePainting.text,surfaceOther.text,other.text); 
				for each( var elem:String in arr)
				{
					if( getFilledVal(elem))
					{
						filled = true;
						return;
					}
				}
				filled = false;
			} 
			public function clear():void
			{
				wallPaperSurface.text = "";
				surfacePainting.text ="";
				surfaceOther.text ="";
				other.text ="";
				filled = false;
			}

			private function collapse():void
			{
				if (open)
				{
					open=false;
					this.currentState ="";
					this.height =COLLAPSED_HEIGHT;
				}
				else
				{
					open =true;
					this.currentState = "showBloc";
					this.height =INITIAL_HEIGHT;
				}
			}
			private function init():void
			{
				this.currentState = "showBloc";
			}
			
			protected override function focusOutHandler(event:FocusEvent):void
			{
				super.focusOutHandler(event);
				doHandleDimensionUpdate(event);
			}
			
			private function doHandleDimensionUpdate(event:Event):void
			{
				var highestDim:String = getHighestDimension();
				if(highestDim != "none" && highestDim!=currentHighestDim)
				{
					if (wall)
					{
						dispatchEvent(new DimensionUpdateEvent(ROOMPART_WALLS_TYPE,highestDim));
					}
					else
					{
						dispatchEvent(new DimensionUpdateEvent(ROOMPART_CEILING_TYPE,highestDim));
					}
					currentHighestDim = highestDim;
				}
			}
			protected function keyupHandler(event:KeyboardEvent):void
			{
				if(event.keyCode!=Keyboard.ENTER)
					return;
				doHandleDimensionUpdate(event);
				if(event.shiftKey) 
				{
					focusManager.getNextFocusManagerComponent(true).setFocus();
				}
				else
				{
					focusManager.getNextFocusManagerComponent(false).setFocus();
				}

			}
			
			private function anyDimensionUpdated():Boolean
			{
				return wallPaperSurface.text!=currentWallPaperSurface || surfacePainting.text!=currentSurfacePainting
						|| surfaceOther.text!=currentSurfaceOther;
			}
			private function getHighestDimension():String
			{
				//TBD NOT TO START WITH 0
				var highest:String = "none" ;
				var highestValue:int = 0 ;
				var theHighest : int =-1;
				if(anyDimensionUpdated())
				{
					if(wallPaperSurface.text!="")
					{
						highestValue = int(wallPaperSurface.text);
						highest = Textures.PAPIERPEINT;
						theHighest = 0;
					}
					if(surfacePainting.text!="" && int(surfacePainting.text)  > highestValue )
					{
						highestValue = int(surfacePainting.text);
						highest = Textures.PEINTURE;
						theHighest = 1;
					}
					if(surfaceOther.text!="" && int(surfaceOther.text) > highestValue)
					{
						highestValue = int(surfaceOther.text);
						highest = Textures.AUTRE;
						theHighest = 2;
					}
				
					if( (surfaceOther.text=="") && (surfacePainting.text=="") && (wallPaperSurface.text=="") ) 
					{
						// back to default
						highest = Textures.DEFAULT;
					}
					
					if ( highestValue == 0 && 
						( (theHighest==0 && int(currentWallPaperSurface) > 0) || 
						  (theHighest==1 && int(currentSurfacePainting) > 0) ||
						  (theHighest==2 && int(currentSurfaceOther) > 0) )
						  )
				    {// if we passing from a >0 value into a 0 value, we should fire the event to pass into 
				     // default texture.
				  		highest = Textures.DEFAULT;
				    }
						  
					currentSurfaceOther = surfaceOther.text;
					currentSurfacePainting = surfacePainting.text;
					currentWallPaperSurface = wallPaperSurface.text;
				}
				if (highestValue==0 && highest !=Textures.DEFAULT)
					highest = "none";
					
				return highest;
				
			}
			
			
			public function getHeight():int{
				if (open==true)
					return INITIAL_HEIGHT;
				else
					return COLLAPSED_HEIGHT;
			}
			public function setModel():void{
				if(wall){
					appModel.damage.getPieceById(pieceID).wall.papier_peint = wallPaperSurface.text;
					appModel.damage.getPieceById(pieceID).wall.peinture = surfacePainting.text;
					appModel.damage.getPieceById(pieceID).wall.autre = other.text;
					appModel.damage.getPieceById(pieceID).wall.autreVAL = surfaceOther.text;
				}
				else
				{
					appModel.damage.getPieceById(pieceID).plafond.papier_peint = wallPaperSurface.text;
					appModel.damage.getPieceById(pieceID).plafond.peinture = surfacePainting.text;
					appModel.damage.getPieceById(pieceID).plafond.autre = other.text;
					appModel.damage.getPieceById(pieceID).plafond.autreVAL = surfaceOther.text;	
				}
			}
			
		]]>
	</mx:Script>
	<mx:states>
		<mx:State name="showBloc">		   
				 <mx:AddChild>
					 <mx:VBox id="vSecondHouse"  horizontalAlign="left" cornerRadius="10" horizontalGap="0">
						<mx:HBox width="300" visible="{wall}" height="{((wall)?20:0)}" horizontalGap="0">
							<mx:Label width="140"   text="" />
							<mx:Label width="130" styleName="simple"  text="Surface endommagée" />
							
						</mx:HBox>	
						<mx:HBox width="300" horizontalGap="15" horizontalAlign="right">
							<mx:Label width="140" styleName="simple"  text="Papier peint :" />
							<mx:TextInput id="wallPaperSurface" width="60"  restrict="0-9" change="setFilled()" 
								 focusOut="{focusOutHandler(event);}" keyUp="{keyupHandler(event)}" />
							<mx:Label width="30" styleName="simple" text="m²" />
						</mx:HBox>					
						<mx:HBox width="300" horizontalGap="15" horizontalAlign="right">	
							<mx:Label width="140"  styleName="simple" text="Peinture :" />
							<mx:TextInput id="surfacePainting" width="60"  restrict="0-9"  change="setFilled()"
								focusOut="{focusOutHandler(event);}" keyUp="{keyupHandler(event)}"/>
							<mx:Label width="30" styleName="simple" text="m²" />
						</mx:HBox>	
						<mx:HBox>
							<mx:Spacer width="30" />
							<mx:Label width="200" styleName="simple" text="Autre, précisez :" />
						</mx:HBox>
						
						
						<mx:HBox width="300" horizontalGap="15" horizontalAlign="right">	
							<mx:TextInput id="other" width="140" maxChars="25"  change="setFilled()" keyUp="{keyupHandler(event)}"/>
							<mx:TextInput id="surfaceOther" width="60"  restrict="0-9"  change="setFilled()" 
								focusOut="{focusOutHandler(event);}" keyUp="{keyupHandler(event)}"/>
							<mx:Label width="30" styleName="simple" text="m²" />
						</mx:HBox>
						
					</mx:VBox>
		       	</mx:AddChild>
		</mx:State>
	</mx:states>
	<mx:ApplicationControlBar width="100%" visible="{((coef!=0)?true:false)}" height="{((open)?23*coef:30*coef)}" verticalAlign="top" click="collapse()">
		<mx:Image source="{((open)?IconClose:IconOpen)}"  />
		<mx:Label text="{title}"  />
	</mx:ApplicationControlBar>
	
</mx:VBox>
