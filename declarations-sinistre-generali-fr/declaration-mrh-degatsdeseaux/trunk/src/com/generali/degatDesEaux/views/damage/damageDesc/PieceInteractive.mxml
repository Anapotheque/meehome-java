<?xml version="1.0" encoding="utf-8"?>
<mx:Panel xmlns:mx="http://www.adobe.com/2006/mxml"  styleName="Panel" borderStyle="none" backgroundAlpha="0" borderAlpha="0" borderThicknessTop="0"
	 horizontalGap="5" horizontalAlign="center" width="100%" borderThicknessRight="0" headerHeight="10" paddingRight="0" 
	 xmlns:comp3D="com.flexriver.components.compositecomponent.*" xmlns:damageDesc="com.generali.degatDesEaux.views.damage.damageDesc.*"
	 creationComplete="init()">
	<mx:Script>
		<![CDATA[
			import com.flexriver.common.logging.DefaultLogger;
			import com.flexriver.common.logging.LogFactory;
 
 
			import com.generali.degatDesEaux.model.three3D.Textures;
 
			import com.generali.degatDesEaux.model.three3D.RoomPartType;
			import com.generali.degatDesEaux.events.ui.DimensionUpdateEvent;
			import mx.collections.ArrayCollection;
			import com.flexriver.components.compositecomponent.model.Choice;
			import com.flexriver.components.compositecomponent.model.Group;
			import com.flexriver.components.compositecomponent.model.CompositeComponentModelItem;
			import com.flexriver.components.compositecomponent.CompositeComponentEvent;
			import mx.states.SetStyle;
			import com.generali.degatDesEaux.model.AppModel;
			import com.generali.degatDesEaux.events.ui.Inter3DEvent;
			import mx.containers.VDividedBox;
			import com.generali.degatDesEaux.views.damage.Interactive;
			import mx.graphics.SolidColor;
			private var first:Boolean = true;
			[Bindable]
			public var index:int = -1;
			[Bindable]
			public var type:String = AppModel.getInstance().DEFAULT_PIECE;
			
			[Bindable]
			[Embed(source="/assets/fred/mini_fleche_right.swf")]
			private var IconClose:Class;
			
			[Bindable]
			[Embed(source="/assets/fred/mini_fleche_down.swf")]
			private var IconOpen:Class;
			[Bindable]
			[Embed(source="/assets/icon_valid.png")]
			private var IconFilled:Class; 
			[Bindable]
			public var widthDMg:int = 300;
			[Bindable]
			public var openedWall:Boolean = false;
			[Bindable]
			public var openedSol:Boolean = false;
			
			[Bindable]
			public var openedPlafond:Boolean = false;
			
			[Bindable]
			public var appModel:AppModel = AppModel.getInstance(); 
			
			[Bindable]
			public var openedMobilier:Boolean = false;
			
			[Bindable]
			public var pieceID:String;;
			
			private const rulesetXML:String = "ruleSet.xml";
	 																  
	 		private var _logger:DefaultLogger = LogFactory.getLogger("com.generali.degatDesEaux.views");
	  		
	 		[Embed(source="config.xml", mimeType="application/octet-stream")]
			protected const EmbeddedConfigXML:Class;
			
	 		public function init():void{
				this.addEventListener(Inter3DEvent.SHOW_WALL,playTrans);
				this.addEventListener(Inter3DEvent.SHOW_PLAFOND,playTrans);
				this.addEventListener(Inter3DEvent.SHOW_SOL,playTrans);
	 			this.addEventListener(Inter3DEvent.SHOW_MOBILIER,playTrans);
	 			dmgWall.addEventListener(DimensionUpdateEvent.ID,dimensionUpdated);
	 			dmgCeiling.addEventListener(DimensionUpdateEvent.ID,dimensionUpdated);
	 			dmgSol.addEventListener(DimensionUpdateEvent.ID,dimensionUpdated);
	 			
	 			rooms.addEventListener(CompositeComponentEvent.INITIALIZED,roomsInitializedHandler);
				rooms.addEventListener(CompositeComponentEvent.LOADERROR,roomsLoadErrorHandler);
				rooms.addEventListener(CompositeComponentEvent.ITEMCLICKED,roomsItemClickedHandler);
				pieceID = this.id;
				/* Loading the config xml as a local file */
				var xml:XML = XML(new EmbeddedConfigXML());
				rooms.buildModel(xml);
				/* Loading the config xml as a remote file */
	 		 	//rooms.loadConfig("./config.xml");
	 		 	
	 		}	
	 		
	 		protected function roomsInitializedHandler(event:CompositeComponentEvent):void
			{
				if (_logger.isDebug())
					_logger.logDebug("3d component loaded");
			}
			
						
			protected function roomsLoadErrorHandler(event:CompositeComponentEvent):void
			{
				//Alert.show("err: " + event.message);
				if (_logger.isError())
				{
					_logger.logError("Failed to load rooms component :");
					if(event.message)
						_logger.logDebug(event.message);
				}
			}
			
			protected function roomsItemClickedHandler(event:CompositeComponentEvent):void
			{
				var item:CompositeComponentModelItem=event.item;
				if(item)
				{
					var typeId :String = item.type;
				
					if(typeId==RoomPartType.FLOOR)
					{
						playSols();
					}
					else if(typeId==RoomPartType.WALLS)
					{
						playWall();
					}
					else if(typeId==RoomPartType.CEILING)
					{
						playPlafond();
					}
					else if(typeId==RoomPartType.FURNITURE)
					{
						playMobile();
					}
				}
			}
			
			
			private function showTexture(rp :Choice,texture:String, roomPartType: String) : void
			{
				var threedtexture :String = null;
				if( texture == Textures.DEFAULT)
				{// use the config.xml default texture.
					threedtexture = rp.defaultid;
				}
				else
				{
					threedtexture = AppModel.getInstance().room3DInterpreter.textures.getTextureByRoomPart(roomPartType,texture);
				}
				
				if (_logger.isDebug())
				   _logger.logDebug("got the event :  roompart= " +  roomPartType + " uitexture=" + texture  + " 3dtexture=" + threedtexture);
				   
				if (threedtexture==null)
				{
					var message:String = "Unknown 3dtexture for RoomPart:"+ roomPartType + " uitexture=" + texture;
					if(_logger.isWarn())
						_logger.logWarning(message);
				}
				if(texture!="none" && threedtexture!=null) 
				{
					rp.selectItemById(threedtexture);
				}
			}
			public function dimensionUpdated(event:DimensionUpdateEvent):void
			{
				if (_logger.isDebug()) 
					_logger.logDebug("dimensionUpdated called");
				//rooms.get   Group . getElementById
				var room3DType:String = get3DRoomType();
				if (!room3DType)
					return;
				
				var group:CompositeComponentModelItem = rooms.model.getElementById(room3DType);
				if(group==null || (!group is Group))
				{
					if(_logger.isWarn())
						_logger.logWarning("Unknown Group " +  room3DType);
					return;
				}
			 	var texture:String = event.texture;
				var rp:CompositeComponentModelItem = (group as Group).getElementById(event.roomPartType);
				if(rp==null || !(rp is Choice))
				{			
					var message:String =  "Unknown RoomPart or could not find roomPart: " + event.roomPartType;
					if(_logger.isWarn())
						_logger.logWarning(message);
					return;
				}
				//Alert.show("got the event : texture=" + event.texture + " roompart= "+ event.roomPartType);
				
				
				showTexture(Choice(rp),texture,event.roomPartType);
			
			
				
			
			}
			
	 		public function playTrans(event:Inter3DEvent):void
	 		{
	 			if(event.typePice == this.type && event.index == this.index)
	 			{
	 				if(event.type == Inter3DEvent.SHOW_WALL)
	 				{
	 				    playWall();
	 				}
	 				else if(event.type == Inter3DEvent.SHOW_SOL)
	 				{
	 				    playSols();
	 				} 
	 				else if(event.type == Inter3DEvent.SHOW_PLAFOND)
	 				{
	 				    playPlafond();
	 				}
	 				else if(event.type == Inter3DEvent.SHOW_MOBILIER)
	 				{
	 				    playMobile();
	 				}  
	 			}
	 		} 
	 		
	 		public function playWall():void
	 		{
	 			if( wall.height < 100)
	 			{
					openedMobilier=false;
					openedPlafond=false;
	 				openedSol=false;
	 				openedWall =true;
	 			 	showWallTransition.target=wall;
	 				hideWallTransition.play([sols,plafonds,mobilier]);
	 				
	 				highlight3DRoom(AppModel.getInstance().room3DInterpreter.roomPartCategoryType.WALLS);
	 			}
	 			else closewall();
	 			
	 		}
	 		
	 		private function highlight3DRoom(type:String):void
	 		{
	 			rooms.highlightItemByType(type);
	 		}
	 		
	 		public function closewall():void	
	 		{
				if( wall.height  > 100)
				{
	 				openedWall =false;
	 				hideItem.play([wall]);
	 				
	 				highlight3DRoom(null);
	 			}
	 		}
	 		
 			public function closePlafonds():void	
 			{
 				if( plafonds.height  > 100)
 				{
 					openedPlafond =false;
 					hideItem.play([plafonds]);
 					
 					highlight3DRoom(null);
 				}
 			}
 			public function closeSol():void	
 			{
 				if( sols.height  > 100)
 				{
 					openedSol =false;
 					hideItem.play([sols]);
 					highlight3DRoom(null);
 				}
 				
 			}
 			public function closeMobilier():void	
 			{
 				if( mobilier.height  > 100)
 				{
	 				openedMobilier =false;
	 				hideItem.play([mobilier]);
	 				
	 				highlight3DRoom(null);
 				}
	 			
	 		}
	 		public function playPlafond():void
	 		{
	 			if( plafonds.height  < 100)
	 			{
	 				openedMobilier=false;
					openedPlafond=true;
	 				openedSol=false;
	 				openedWall =false;
	 				showWallTransition.target =plafonds;
					hideWallTransition.play([wall,sols,mobilier]);	
					
					highlight3DRoom(AppModel.getInstance().room3DInterpreter.roomPartCategoryType.CEILING);
	 	 		}
	 	 		else closePlafonds();
	 	 	}
	
	 	 	public function styleText(text:Label):void
	 	 	{
	 	 		text.setStyle("textDecoration","underline");
	 	 	}
	 	 	public function styleTextOut(text:Label):void
	 	 	{
	 	 		text.setStyle("textDecoration","");
	 	 	}
	 		public function playSols():void
	 		{
	 			if( sols.height <100)
	 			{	
	 				openedMobilier=false;
					openedPlafond=false;
	 				openedSol=true;
	 				openedWall =false;
	 				
	 				showSolTransition.target=sols;
	     			hideSolTransition.play([wall,plafonds,mobilier]);
	     			
	     			highlight3DRoom(AppModel.getInstance().room3DInterpreter.roomPartCategoryType.FLOOR);
	 			} 
	 			else closeSol();
	 		}
	 		public function playMobile():void
	 		{
	 			if( mobilier.height <100)
	 			{
	 				openedMobilier=true;
					openedPlafond=false;
	 				openedSol=false;
	 				openedWall =false;
	 		    	showMobTransition.target = mobilier;
	 				hideMobTransition.play([wall,sols,plafonds]);
	 				
	 				highlight3DRoom(AppModel.getInstance().room3DInterpreter.roomPartCategoryType.FURNITURE);
	 		 	}
	 		 	else closeMobilier();
	 		}
	 		
	 		public function chooseTypePiece():void
	 		{
	 		 	if (cmbTypePiece.selectedIndex > 0)
	 		 	{
	 		 		this.index = (parent.parent.parent as Interactive).getPieceIndex(AppModel.getInstance().dpTypePiece[cmbTypePiece.selectedIndex]);
	 		 		this.type = AppModel.getInstance().dpTypePiece[cmbTypePiece.selectedIndex];	 		 		
	 		 		this.label = this.type + ' '+ index.toString();
	 		 		AppModel.getInstance().damage.getPieceById(pieceID).name = this.type + ' '+ index.toString();
	 		 		AppModel.getInstance().damage.getPieceById(pieceID).type_piece = cmbTypePiece.selectedLabel;
	 		 		HInter.visible = true;
	 		 		vbDimensions.visible = true;
	 		 		hTypePiece.visible = true;
	 		 		clearProperties();
	 		 		show3DRoom();
	 		 	}
	 		}
	 		
	 		public function clear():void
	 		{
				if(first)
				{
					this.txtCommentary.text = "";
					txtCommentary.setStyle("color","black");
					first=false;
				}
			}
			
			public function clearProperties():void
			{
				txtLargeur.text = "";
				txtLongueur.text = "";
				AppModel.getInstance().damage.getPieceById(pieceID).clear();
				this.dmgWall.clear();
				this.dmgCeiling.clear();
				this.dmgSol.clear();
				this.dmgMobilier.clear();
				if(!first)
				{
					txtCommentary.text="" ;
				}
				hideItem.play([wall,plafonds,sols,mobilier]);
			}
			
			public function setModel():void
			{
				AppModel.getInstance().damage.getPieceById(pieceID).longueur =txtLongueur.text;
	 		 	AppModel.getInstance().damage.getPieceById(pieceID).largeur = txtLargeur.text;
	 		 	if (!first)
	 		 	AppModel.getInstance().damage.getPieceById(pieceID).pieceDetails = txtCommentary.text;
			}
			
			private function get3DRoomType():String
			{
				var room3DType:String = AppModel.getInstance().room3DInterpreter.roomType.get3DRoomType(this.type);
				if( room3DType)
				{
					return room3DType;	
				}
				else
				{
					if (_logger.isWarn())
					{
						_logger.logWarning("unknown room type: " + this.type);
					}
					return null;
				}
			}
			private function show3DRoom():void
			{
				
				var room3DType:String = get3DRoomType();
				if( room3DType)
				{
					rooms.selectItemById(room3DType);
				}		
			}
			
		]]>
	</mx:Script> 
	<mx:Sequence id="hideItem"  >
		<mx:Blur blurXTo="0" blurYTo="0" duration="100" />	
			<mx:Resize   heightTo="25"  duration="200" />	
			<mx:Pause duration="200"/>	
	</mx:Sequence>
	<mx:Sequence id="hideWallTransition" effectStart="rooms.enabled=false" effectEnd="showWallTransition.play()" >				
			<mx:Blur blurXTo="0" blurYTo="0" duration="100" />	
			<mx:Resize   heightTo="25"  duration="200" />	
			<mx:Pause duration="200"/>					
			</mx:Sequence>
	<mx:Sequence id="hideSolTransition" effectStart="rooms.enabled=false" effectEnd="showSolTransition.play()" >				
			<mx:Blur blurXTo="0" blurYTo="0" duration="100" />	
			<mx:Resize   heightTo="25"  duration="200" />	
			<mx:Pause duration="200"/>					
			</mx:Sequence>
	<mx:Sequence id="hideMobTransition" effectStart="rooms.enabled=false" effectEnd="showMobTransition.play()" >				
	<mx:Blur blurXTo="0" blurYTo="0" duration="100" />	
	<mx:Resize   heightTo="25"  duration="200" />	
	<mx:Pause duration="200"/>					
	</mx:Sequence>
	<mx:Sequence id="showWallTransition" effectEnd="rooms.enabled=true"  >
			<mx:Resize   heightTo="190" duration="800" />			
		</mx:Sequence>
		<mx:Sequence id="showSolTransition"  effectEnd="rooms.enabled=true"  >
			<mx:Resize   heightTo="230" duration="800" />			
		</mx:Sequence>
		<mx:Sequence id="showMobTransition"  effectEnd="rooms.enabled=true"  >
			<mx:Resize   heightTo="200" duration="800" />			
		</mx:Sequence>	
  	<mx:HBox width="95%" horizontalGap="2" horizontalAlign="left">
		  		<mx:HBox id="hTypePiece" >
			  		<mx:Label width="95" styleName="simple"   text="Type de pièce :" /> 
			  		<mx:ComboBox  id="cmbTypePiece" styleName="simple" rowCount="7" change="chooseTypePiece()" width="120" dataProvider="{appModel.dpTypePiece}" selectedIndex="{appModel.getPieceIndex(appModel.damage.getPieceById(pieceID).type_piece)}" />
			  		<mx:Spacer width="6"/>		 
				</mx:HBox>
		  		  <mx:VBox visible="false" id="vbDimensions" horizontalAlign="left">		  			
					  		<mx:HBox>	
		 				  		<mx:Label width="145" styleName="simple"  text="Dimensions de la pièce :" />
		 				  			<mx:HBox horizontalGap="0">		
							  			<mx:Label width="70"   text="Longueur :" styleName="simple" />
							  			<mx:TextInput id="txtLongueur" width="40" maxChars="4" restrict="0-9" change="setModel()" />
								  		<mx:Label width="18"   text="m" />	
								  	</mx:HBox>	
								  	<mx:Spacer width="5" />
								  	<mx:HBox horizontalGap="0">		
						  				<mx:Label width="70"   text="Largeur :" styleName="simple" />	
					  		  	  		<mx:TextInput id="txtLargeur" width="40" maxChars="4" restrict="0-9" change="setModel()"  />		
						  				<mx:Label width="18"   text="m" />	
						  			</mx:HBox>
					  				
					  		</mx:HBox>				  					  			
				 </mx:VBox>
	 </mx:HBox>
	 
	 <mx:GlowFilter id="highlightfilter" color="#f6f30f" alpha="1" blurX="10" blurY="10" strength="2" quality="1" inner="true" knockout="false"/>
		
	 <mx:Spacer height="0" />
	 	 	<mx:Spacer width="12" />
	  <mx:HBox id="HInter" width="95%" visible="false" horizontalAlign="left" verticalAlign="tops">
	  	<mx:VBox  height="100%">
	  	<mx:Label styleName="simple" text="Cliquez sur les éléments endommagés"  />
	  	<mx:Spacer height="5"/>
	  	
	  	 <!--<damageDesc:Inter3D width="50%" index="{index}" type="{type}" />-->  
	  
	  	<comp3D:CompositeComponent id="rooms" disabledOverlayAlpha="0" highlightitemsonrollover="true" highlightfilter="{highlightfilter}"/>
	
	  	
	  	</mx:VBox>
	  	<mx:VBox horizontalAlign="center"  height="100%">
	  		<mx:Label styleName="simple" text="ou"/>
	  		<mx:Spacer width="30"/>
	  	</mx:VBox>
	  	
	  	<mx:VBox> 		
	  				<mx:HBox width="100%" horizontalAlign="center">
	  					<mx:Label styleName="simple" text="choisissez ci-dessous :"/>
	  				</mx:HBox>
	  			<mx:VBox verticalGap="0" width="{widthDMg}" height="25" id="wall" horizontalAlign="right">
	  			  <mx:HBox horizontalGap="0">
	  					<mx:ApplicationControlBar horizontalAlign="left"  width="{widthDMg}" click="playWall()">
	  						<mx:Image source="{(openedWall)?IconOpen:IconClose}" click="closewall()" />
	  						<mx:Label styleName="simpleBold" id="lblMur" text="Murs" rollOver="styleText(lblMur)" rollOut="styleTextOut(lblMur)" />
	  						<mx:Image  width="18" height="18" source="{(dmgWall.filled)?IconFilled:null}" />
	  						
	  					</mx:ApplicationControlBar>
	  				</mx:HBox>
	  				<damageDesc:DamageWall   pieceID="{pieceID}"    coef="0" id="dmgWall" visible="true" height="160" width="{widthDMg}"  title="Murs"  wall="true"/>	 
				</mx:VBox>
				<mx:VBox id="plafonds" width="{widthDMg}"  height="25" verticalGap="0" horizontalAlign="right">
	  				<mx:HBox horizontalGap="0">
	  					<mx:ApplicationControlBar horizontalAlign="left"  width="{widthDMg}" click="playPlafond()">
	  						<mx:Image source="{(openedPlafond)?IconOpen:IconClose}" click="closePlafonds()"/>
	  						<mx:Label styleName="simpleBold" id="lblwall" text="Plafonds" rollOver="styleText(lblwall)" rollOut="styleTextOut(lblwall)"/>
	  						<mx:Image width="18" height="18"  source="{(dmgCeiling.filled)?IconFilled:null}" />
	  					</mx:ApplicationControlBar>
	  				</mx:HBox>
	  				<damageDesc:DamageWall  pieceID="{pieceID}"  coef="0" id="dmgCeiling" visible="true" height="160" width="{widthDMg}" title="Plafons"  wall="false"/>
				</mx:VBox>
				<mx:VBox verticalGap="0"   width="{widthDMg}"  height="25" id="sols" horizontalAlign="right">
	  				<mx:HBox horizontalGap="0">
	  					<mx:ApplicationControlBar horizontalAlign="left"  width="{widthDMg}"  click="playSols()" >
	  					<mx:Image source="{(openedSol)?IconOpen:IconClose}" click="closeSol()" />
	  						<mx:Label styleName="simpleBold" text="Sols" id="lblCeilling" rollOver="styleText(lblCeilling)" rollOut="styleTextOut(lblCeilling)" />
	  						<mx:Image width="18" height="18" source="{(dmgSol.filled)?IconFilled:null}" />
	  					</mx:ApplicationControlBar>
	  				</mx:HBox>
	  				<damageDesc:DamageSol  pieceID="{pieceID}"   coef="0" id="dmgSol" visible="true" height="200" width="{widthDMg}"  title="Sols"  />
				</mx:VBox>
			
				 <mx:VBox verticalGap="0" width="{widthDMg}" height="25" id="mobilier" horizontalAlign="right">
	  				<mx:HBox horizontalGap="0">
	  					<mx:ApplicationControlBar horizontalAlign="left"  width="{widthDMg}"  click="playMobile()">
	  						<mx:Image source="{(openedMobilier)?IconOpen:IconClose}" click="closeMobilier()" />
	  						<mx:Label styleName="simpleBold" text="Mobilier" id="lblMobilier" rollOut="styleTextOut(lblMobilier)" rollOver="styleText(lblMobilier)" />
	  						<mx:Image  width="18" height="18"  source="{(dmgMobilier.filled)?IconFilled:null}" />
	  					</mx:ApplicationControlBar>
	  				</mx:HBox>
	  				<damageDesc:DamageOther  pieceID="{pieceID}"   coef="0" id="dmgMobilier" visible="true" height="150" width="{widthDMg}"/>	 
				</mx:VBox>
				
				<mx:Spacer height="3"/>
				<mx:VBox width="100%" borderStyle="solid" height="0"/>
				<mx:VBox   horizontalAlign="center" cornerRadius="10" horizontalGap="0">
				<mx:TextArea width="300"  editable="false" backgroundAlpha="0" borderStyle="none" styleName="simple" text="Ajoutez des commentaires si besoin (1000 caractères maximum):" />
				
			  	<mx:HBox width="300" height="100%">
							<mx:TextArea height="100%" width="300" maxChars="1000" click="clear()"  id="txtCommentary" text="Saisie libre" color="#c0c1c2" editable="true"  backgroundAlpha="1" borderStyle="solid" 
								change="setModel()"/>
				</mx:HBox>		
	  	</mx:VBox>
		 </mx:VBox>  
	  	
	  		
	  </mx:HBox>
</mx:Panel>
